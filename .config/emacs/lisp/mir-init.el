;;; mir-init.el --- init utilities                   -*- lexical-binding: t; -*-

;; Copyright (C) 2018  Allen Li
;; Keywords: local

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Personal init utilities.

;;; Code:

(defmacro mir-init-add-hooks (hook &rest funcs)
  "Add to the HOOK the given FUNCS."
  (declare (indent 1) (debug (sexp &rest form)))
  `(dolist (f (list ,@(nreverse funcs)))
     (add-hook ',hook f)))

(defsubst mir-init--mode-hook (mode)
  "Return the hook symbol for the MODE symbol."
  (intern (concat (symbol-name mode) "-hook")))

(defmacro mir-init-add-to-modes (form &rest modes)
  "Add FORM to the mode hooks for MODES."
  (declare (indent 1) (debug (form &rest sexp)))
  (let ((x (gensym)))
    `(let ((,x ,form))
       (dolist (m ',modes)
         (add-hook (mir-init--mode-hook m) ,x)))))

(defmacro mir-init-enable-for-modes (minor-mode &rest modes)
  "Enable the minor mode MINOR-MODE for MODES."
  (declare (indent 1) (debug (sexp &rest sexp)))
  `(mir-init-add-to-modes (lambda () (,minor-mode 1)) ,@modes))

(defmacro mir-init-disable-for-modes (minor-mode &rest modes)
  "Disable the minor mode MINOR-MODE for MODES."
  (declare (indent 1) (debug (sexp &rest sexp)))
  `(mir-init-add-to-modes (lambda () (,minor-mode -1)) ,@modes))

(defmacro mir-init-setter (var value)
  "Make hook function for setting VAR to VALUE."
  `(lambda () (defvar ,var) (setq-local ,var ,value)))

(defmacro mir-init-bind-keys (keymap &rest forms)
  "Define keys in KEYMAP symbol according to FORMS."
  (declare (indent 1) (debug (sexp &rest form)))
  `(when (boundp ',keymap)
     ,@(mapcar (lambda (form) `(define-key ,keymap ,@form)) forms)))

(defmacro mir-init-dir-class (class variables &rest dirs)
  "Define a directory CLASS with VARIABLES on DIRS."
  (declare (indent 2) (debug (sexp form &rest form)))
  `(progn
     (dir-locals-set-class-variables ',class ,variables)
     (dolist (d (list ,@dirs))
       (dir-locals-set-directory-class d ',class))))

(defun mir-init-bootstrap-package-vc (packages)
  "Bootstrap package-vc packages."
  (require 'cl-lib)
  ;; package-vc packages require a -pkg.el file.
  ;; Normally this is generated by the install process if it is not present in
  ;; the source.
  (let ((vc-dir (expand-file-name "vc" user-emacs-directory)))
    (cl-flet ((install (package)
		(let ((pkgname (symbol-name package)))
                  (unless (package-installed-p package)
                    (let ((pkg-dir (expand-file-name pkgname package-user-dir)))
                      (when (file-exists-p pkg-dir)
			;; This is a symbolic link to the checkout.
                        ;; This is likely because the -pkg.el file is missing so
                        ;; Emacs does treat the symbolically linked directory as
                        ;; a package, but `package-vc-install-from-checkout'
                        ;; will still prompt to overwrite the existing symbolic
                        ;; link.
			(delete-file pkg-dir)))
                    (package-vc-install-from-checkout (expand-file-name pkgname vc-dir) pkgname)))))
      (dolist (package packages)
        (install package)))))

(provide 'mir-init)
;;; mir-init.el ends here
